plugins {
    id 'java-library'
    id 'io.qameta.allure' version '2.11.2'
    id 'io.freefair.lombok' version '8.13.1'
}

repositories {
    mavenCentral()
    gradlePluginPortal()
}

def restAssuredVersion = "5.3.1",
    allureVersion = "2.21.0",
    junitVersion = "5.9.3",
    selenideVersion = "6.19.1"

allure {
    report {
        version.set(allureVersion)
    }
    adapter {
        aspectjWeaver.set(true)
        frameworks {
            junit5 {
                adapterVersion.set(allureVersion)
            }
        }
    }
}

dependencies {
    testImplementation(
            "io.rest-assured:rest-assured:$restAssuredVersion",
            "io.rest-assured:json-schema-validator:$restAssuredVersion",
            "io.qameta.allure:allure-rest-assured:$allureVersion",
            "io.qameta.allure:allure-selenide:$allureVersion",

            "com.codeborne:selenide:$selenideVersion",
            "org.junit.jupiter:junit-jupiter:$junitVersion",
            "org.assertj:assertj-core:3.23.1",
            "com.github.javafaker:javafaker:1.0.2",
            "com.opencsv:opencsv:5.7.1",
            "com.codeborne:xls-test:1.4.3",
            "com.codeborne:pdf-test:1.8.1",
            "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.13.1",
            "org.slf4j:slf4j-simple:2.0.7",
            'com.automation-remarks:video-recorder-junit5:2.0',
            'io.qameta.allure:allure-attachments:2.21.0'
    )
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

// Основная задача test
test {
    useJUnitPlatform()
    systemProperty "allure.results.directory", "build/allure-results"
    systemProperties System.getProperties()

    // Фильтрация по тегам если указан includeTags
    if (System.getProperty("includeTags") != null) {
        filter {
            includeTagsMatching System.getProperty("includeTags")
        }
    }

    // Фильтрация по имени класса если указан test.class
    if (System.getProperty("test.class") != null) {
        filter {
            includeClassNamePattern System.getProperty("test.class")
        }
    }

    testLogging {
        events "started", "skipped", "failed", "standard_error", "standard_out"
        exceptionFormat "short"
    }
}

// Отдельные задачи для каждого типа тестов
task smoke(type: Test) {
    useJUnitPlatform {
        includeTags("smoke")
    }
    systemProperties System.getProperties()
}

task regress(type: Test) {
    useJUnitPlatform {
        includeTags("regress")
    }
    systemProperties System.getProperties()
}

task allTests(type: Test) {
    useJUnitPlatform()
    systemProperties System.getProperties()
}

// Универсальная задача для параметризованного запуска
task runTests(type: Test) {
    useJUnitPlatform {
        if (System.getProperty("includeTags") != null) {
            includeTags(System.getProperty("includeTags"))
        } else if (System.getProperty("task") != null) {
            def task = System.getProperty("task")
            switch (task) {
                case "smoke": includeTags("smoke"); break
                case "regress": includeTags("regress"); break
                case "all": break // все тесты
                default: includeTags("smoke")
            }
        }
    }

    // Фильтрация по классу если указан
    if (System.getProperty("test.class") != null) {
        filter {
            includeClassNamePattern System.getProperty("test.class")
        }
    }

    systemProperties System.getProperties()
}

// Задача для запуска только DemoQAParam с фильтрацией по тегам
task runDemoQATests(type: Test) {
    useJUnitPlatform {
        if (System.getProperty("includeTags") != null) {
            includeTags(System.getProperty("includeTags"))
        } else if (System.getProperty("task") != null) {
            def task = System.getProperty("task")
            switch (task) {
                case "smoke": includeTags("smoke"); break
                case "regress": includeTags("regress"); break
                case "all": break
                default: includeTags("smoke")
            }
        }
    }
    include "**/DemoQAParam.class"
    systemProperties System.getProperties()
}